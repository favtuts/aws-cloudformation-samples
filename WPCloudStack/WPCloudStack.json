{
    "Conditions": {
        "DomainIsBlank": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "WebsiteDomain"
                }
            ]
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-d4ac31b2"
            },
            "ap-northeast-2": {
                "AMI": "ami-29f35347"
            },
            "ap-south-1": {
                "AMI": "ami-0b055164"
            },
            "ap-southeast-2": {
                "AMI": "ami-4f9f6d2d"
            },
            "ca-central-1": {
                "AMI": "ami-74cf4a10"
            },
            "eu-central-1": {
                "AMI": "ami-85ac3cea"
            },
            "eu-west-1": {
                "AMI": "ami-9f4adee6"
            },
            "eu-west-2": {
                "AMI": "ami-13d9c177"
            },
            "us-east-1": {
                "AMI": "ami-46a4f33c"
            },
            "us-east-2": {
                "AMI": "ami-9e1a31fb"
            },
            "us-west-1": {
                "AMI": "ami-7f9b9a1f"
            },
            "us-west-2": {
                "AMI": "ami-4c5ff434"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "EC2 instance"
                    },
                    "Parameters": [
                        "EC2Class",
                        "InputCIDR",
                        "KeyName"
                    ]
                },
                {
                    "Label": {
                        "default": "Resource Naming"
                    },
                    "Parameters": [
                        "BucketName",
                        "WebsiteTitle",
                        "WebsiteDomain"
                    ]
                },
                {
                    "Label": {
                        "default": "WordPress user account"
                    },
                    "Parameters": [
                        "WPUser",
                        "WPPassword",
                        "WPEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Aurora DB"
                    },
                    "Parameters": [
                        "DBClusterName",
                        "DBPassword",
                        "DBClass"
                    ]
                }
            ],
            "ParameterLabels": {
                "AccountId": {
                    "default": "AWS Account Id"
                }
            }
        }
    },
    "Outputs": {
        "EIPDNS": {
            "Description": "Elastic IP address",
            "Value": {
                "Ref": "IPAddress"
            }
        }
    },
    "Parameters": {
        "BucketName": {
            "Description": "The name of a new S3 bucket where your images uploads will be saved",
            "MinLength": "1",
            "Type": "String"
        },
        "DBClass": {
            "AllowedValues": [
                "db.t2.small",
                "db.t2.medium",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge"
            ],
            "ConstraintDescription": "Must select a valid database instance type.",
            "Default": "db.t2.small",
            "Description": "DB instance type",
            "Type": "String"
        },
        "DBClusterName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "Must be alphanumeric and start with a letter.",
            "Default": "wpsurestack",
            "Description": "This is the name of your Aurora DB instance (e.g. wpsurestack)",
            "MinLength": "2",
            "Type": "String"
        },
        "DBPassword": {
            "ConstraintDescription": "Must contain at least 8 characters. Do not use &, /, @, single, or double quotes.",
            "Description": "Password for the Aurora DB master user account (you can reset this in RDS later if you forget). Must contain at least 8 characters. Do not use &, /, @, single, or double quotes.",
            "MinLength": "8",
            "NoEcho": true,
            "Type": "String"
        },
        "EC2Class": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge"
            ],
            "ConstraintDescription": "Must select a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "EC2 instance type",
            "Type": "String"
        },
        "InputCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Description": "The public IP address range for SSH access. See http://checkip.dyndns.org/ to get your local machine IP. Remember to append the CIDR length. For example: 12.34.56.78/32 ",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "WPEmail": {
            "ConstraintDescription": "Please use a valid email address.",
            "Description": "The email address of the WordPress account. This needs to be valid in order for password reset to work.",
            "MinLength": "3",
            "Type": "String"
        },
        "WPPassword": {
            "ConstraintDescription": "Must contain at least 6 characters.",
            "Description": "The password of the WordPress account. Must contain at least 6 characters.",
            "MinLength": "6",
            "NoEcho": true,
            "Type": "String"
        },
        "WPUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "Must be alphanumeric and start with a letter.",
            "Description": "This is a WordPress account that you will use to log into wp-admin",
            "MinLength": "1",
            "Type": "String"
        },
        "WebsiteDomain": {
            "Description": "Leave this blank, and we'll use the EC2 public IP as the DNS name. But if you have a domain name already registered, enter it here (e.g. www.example.com) -- just remember to point your DNS to the public IP.",
            "Type": "String"
        },
        "WebsiteTitle": {
            "ConstraintDescription": "Must not be blank.",
            "Description": "A default site will be generated for you. Please provide a website title (e.g. My Test Website)",
            "MinLength": "1",
            "Type": "String"
        }
    },
    "Resources": {
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "AuroraDB": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "DBClusterIdentifier": {
                    "Ref": "AuroraDBCluster"
                },
                "DBInstanceClass": {
                    "Ref": "DBClass"
                },
                "DBSubnetGroupName": {
                    "Ref": "MyDBSubnetGroup"
                },
                "Engine": "aurora",
                "EngineVersion": "5.6.10a",
                "MultiAZ": "false",
                "PubliclyAccessible": "false"
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "AuroraDBCluster": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    {
                        "Fn::Select": [
                            1,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "MyDBSubnetGroup"
                },
                "DatabaseName": {
                    "Ref": "DBClusterName"
                },
                "Engine": "aurora",
                "EngineVersion": "5.6.10a",
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MasterUsername": "admin",
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "RDSSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBCluster"
        },
        "BucketPolicy": {
            "Properties": {
                "Bucket": {
                    "Ref": "WordPressS3Bucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "WordPressS3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::S3::BucketPolicy"
        },
        "IPAddress": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "WordPressLEMPWebServer"
                }
            },
            "Type": "AWS::EC2::EIP"
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "MyDBSubnetGroup": {
            "DependsOn": [
                "WordPressPrivateSubnetA",
                "WordPressPrivateSubnetB"
            ],
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "WordPressPrivateSubnetA"
                    },
                    {
                        "Ref": "WordPressPrivateSubnetB"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "PublicDefaultRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "WordPressPublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicRouteTable": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "RDSSecurityGroup": {
            "DependsOn": "WordPressEC2SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for RDS DB Instance.",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "WordPressEC2SecurityGroup"
                        },
                        "ToPort": "3306"
                    }
                ],
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "W3TCServiceAccount": {
            "DependsOn": "WordPressS3Bucket",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:ListAllMyBuckets"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "WordPressS3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "WordPressS3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "accessS3Bucket"
                    }
                ]
            },
            "Type": "AWS::IAM::User"
        },
        "W3TCServiceAccountAccessKey": {
            "Properties": {
                "UserName": {
                    "Ref": "W3TCServiceAccount"
                }
            },
            "Type": "AWS::IAM::AccessKey"
        },
        "WPWebServerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "WPWebServerRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:ListMetrics",
                                "cloudwatch:PutMetricData"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Action": [
                                "ec2:DescribeTags"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "CloudWatchLogging",
                "Roles": [
                    {
                        "Ref": "WPWebServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "WebServerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WPWebServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "WordPressEC2SecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable web traffic",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": {
                            "Ref": "InputCIDR"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    }
                ],
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "WordPressLEMPWebServer": {
            "DependsOn": [
                "AuroraDB",
                "myDistribution",
                "W3TCServiceAccount",
                "W3TCServiceAccountAccessKey",
                "WebServerInstanceProfile"
            ],
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "WebServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "EC2Class"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "WordPressEC2SecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "WordPressPublicSubnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WordPress Instance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash",
                                "\n",
                                "mkdir -p /etc/nginx/ssl/ && cd $_",
                                "\n",
                                "rm -f wordpress.key\n",
                                "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout wordpress.key -out wordpress.bundle.crt -subj \"/C=NA/ST=NA/L=NA/O=NA/OU=NA/CN=NA\"",
                                "\n",
                                "WP_CONN_USER=\"wpconnectionuser\"",
                                "\n",
                                "WP_CONN_PASS=$(openssl rand -base64 12)",
                                "\n",
                                "mysql",
                                " -h ",
                                {
                                    "Fn::GetAtt": [
                                        "AuroraDBCluster",
                                        "Endpoint.Address"
                                    ]
                                },
                                " -P 3306",
                                " -u admin",
                                " -p'",
                                {
                                    "Ref": "DBPassword"
                                },
                                "'",
                                " -e \"CREATE USER '$WP_CONN_USER' IDENTIFIED BY '$WP_CONN_PASS';",
                                " GRANT ALL PRIVILEGES ON ",
                                {
                                    "Ref": "DBClusterName"
                                },
                                ".* TO '$WP_CONN_USER';",
                                " FLUSH PRIVILEGES;\"",
                                "\n",
                                "DOCROOT=/var/www/html/wordpress",
                                "\n",
                                "cd $DOCROOT",
                                "\n",
                                "wp core config",
                                " --dbname=\"",
                                {
                                    "Ref": "DBClusterName"
                                },
                                "\"",
                                " --dbuser=$WP_CONN_USER",
                                " --dbpass=$WP_CONN_PASS",
                                " --dbhost=\"",
                                {
                                    "Fn::GetAtt": [
                                        "AuroraDBCluster",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"",
                                " --allow-root",
                                "\n",
                                "sleep 10s",
                                "\n",
                                "publicDNS=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)",
                                "\n",
                                "DOMAIN_NAME=",
                                {
                                    "Fn::If": [
                                        "DomainIsBlank",
                                        "$publicDNS",
                                        {
                                            "Ref": "WebsiteDomain"
                                        }
                                    ]
                                },
                                "\n",
                                "wp core install",
                                " --url=$DOMAIN_NAME",
                                " --title=\"",
                                {
                                    "Ref": "WebsiteTitle"
                                },
                                "\"",
                                " --admin_user=\"",
                                {
                                    "Ref": "WPUser"
                                },
                                "\"",
                                " --admin_password='",
                                {
                                    "Ref": "WPPassword"
                                },
                                "'",
                                " --admin_email=\"",
                                {
                                    "Ref": "WPEmail"
                                },
                                "\"",
                                " --allow-root\n",
                                "wp core update --allow-root",
                                "\n",
                                "/home/ec2-user/wordpress-addFSMethod.sh",
                                "\n",
                                "wp plugin activate w3-total-cache --allow-root",
                                "\n",
                                "wp plugin activate snipe-nginx-cache --allow-root",
                                "\n",
                                "wp option add nginx_cache_sniper_path '/var/lib/nginx/cache' --allow-root",
                                "\n",
                                "wp option add nginx_cache_sniper_auto_clear 1 --allow-root",
                                "\n",
                                "wp total-cache option set cdn.theme.files \"*.css;*.js;*.gif;*.png;*.jpg;*.ico;*.ttf;*.otf;*.woff;*.less\" --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.expires --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.cache.control --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.etag --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.replace --type=boolean false --allow-root",
                                "\n",
                                "\n",
                                "wp total-cache option set cdn.engine cf --allow-root",
                                "\n",
                                "wp total-cache option set cdn.cf.key \"",
                                {
                                    "Ref": "W3TCServiceAccountAccessKey"
                                },
                                "\" --allow-root",
                                "\n",
                                "wp total-cache option set cdn.cf.secret \"",
                                {
                                    "Fn::GetAtt": [
                                        "W3TCServiceAccountAccessKey",
                                        "SecretAccessKey"
                                    ]
                                },
                                "\" --allow-root",
                                "\n",
                                "wp total-cache option set cdn.cf.bucket \"",
                                {
                                    "Ref": "BucketName"
                                },
                                "\" --allow-root",
                                "\n",
                                "wp total-cache option set cdn.cf.id \"",
                                {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Fn::Split": [
                                                ".",
                                                {
                                                    "Fn::GetAtt": [
                                                        "myDistribution",
                                                        "DomainName"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "\" --allow-root",
                                "\n",
                                "wp total-cache option set cdn.enabled --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.cssjs.replace --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.replace --type=boolean true --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.cssjs.compression --type=boolean false --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.html.compression --type=boolean false --allow-root",
                                "\n",
                                "wp total-cache option set browsercache.other.compression --type=boolean false --allow-root",
                                "\n",
                                "AWS_ACCESS_KEY_ID=",
                                {
                                    "Ref": "W3TCServiceAccountAccessKey"
                                },
                                " AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Fn::GetAtt": [
                                        "W3TCServiceAccountAccessKey",
                                        "SecretAccessKey"
                                    ]
                                },
                                " aws s3 cp wp-includes/ s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/wp-includes --recursive --exclude \"*\" --include \"*.css\" --include \"*.js\" --include \"*.png\" --include \"*.jpg\" --include \"*.gif\" --include \"*.xml\"",
                                "\n",
                                "AWS_ACCESS_KEY_ID=",
                                {
                                    "Ref": "W3TCServiceAccountAccessKey"
                                },
                                " AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Fn::GetAtt": [
                                        "W3TCServiceAccountAccessKey",
                                        "SecretAccessKey"
                                    ]
                                },
                                " aws s3 cp wp-content/  s3://",
                                {
                                    "Ref": "BucketName"
                                },
                                "/wp-content --recursive --exclude \"*\" --include \"*.css\" --include \"*.js\" --include \"*.png\" --include \"*.jpg\" --include \"*.gif\" --include \"*.xml\"",
                                "\n",
                                "sed -i \"s/server_name _;/server_name $DOMAIN_NAME;/\" /etc/nginx/conf.d/wordpress.conf",
                                "\n",
                                "mysql",
                                " -h ",
                                {
                                    "Fn::GetAtt": [
                                        "AuroraDBCluster",
                                        "Endpoint.Address"
                                    ]
                                },
                                " -P 3306",
                                " -u $WP_CONN_USER",
                                " -p$WP_CONN_PASS",
                                " -D ",
                                {
                                    "Ref": "DBClusterName"
                                },
                                " < /home/ec2-user/w3tc_cdn.sql",
                                "\n",
                                "chown -R nginx:nginx $DOCROOT",
                                "\n",
                                "(cd $DOCROOT && chmod 640 wp-config.php && mv $_ ..)",
                                "\n",
                                "service nginx reload",
                                "\n",
                                "echo W3TCServiceAccountAccessKeyID=\"",
                                {
                                    "Ref": "W3TCServiceAccountAccessKey"
                                },
                                "\" >> /home/ec2-user/CloudFormationExport.cfg",
                                "\n",
                                "echo W3TCServiceAccountAccessKeySecret=\"",
                                {
                                    "Fn::GetAtt": [
                                        "W3TCServiceAccountAccessKey",
                                        "SecretAccessKey"
                                    ]
                                },
                                "\" >> /home/ec2-user/CloudFormationExport.cfg",
                                "\n",
                                "echo S3BucketName=\"",
                                {
                                    "Ref": "BucketName"
                                },
                                "\" >> /home/ec2-user/CloudFormationExport.cfg",
                                "\n",
                                "echo DistributionDomainRoot=\"",
                                {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Fn::Split": [
                                                ".",
                                                {
                                                    "Fn::GetAtt": [
                                                        "myDistribution",
                                                        "DomainName"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "\" >> /home/ec2-user/CloudFormationExport.cfg"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "WordPressPrivateSubnetA": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "172.30.1.0/24",
                "MapPublicIpOnLaunch": "false",
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "WordPressPrivateSubnetB": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "172.30.2.0/24",
                "MapPublicIpOnLaunch": "false",
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "WordPressPublicSubnet": {
            "Properties": {
                "CidrBlock": "172.30.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "WordPressVPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "WordPressS3Bucket": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "PublicRead",
                "BucketName": {
                    "Ref": "BucketName"
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "GET"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ],
                            "MaxAge": 3000
                        }
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "WordPressVPC": {
            "Properties": {
                "CidrBlock": "172.30.0.0/16"
            },
            "Type": "AWS::EC2::VPC"
        },
        "myDistribution": {
            "DependsOn": "WordPressS3Bucket",
            "Properties": {
                "DistributionConfig": {
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "GET",
                            "HEAD",
                            "OPTIONS"
                        ],
                        "Compress": "true",
                        "ForwardedValues": {
                            "Headers": [
                                "Origin"
                            ],
                            "QueryString": "false"
                        },
                        "TargetOriginId": "Origin 1",
                        "ViewerProtocolPolicy": "allow-all"
                    },
                    "Enabled": "true",
                    "HttpVersion": "http2",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "BucketName"
                                        },
                                        ".s3.amazonaws.com"
                                    ]
                                ]
                            },
                            "Id": "Origin 1",
                            "S3OriginConfig": {}
                        }
                    ]
                }
            },
            "Type": "AWS::CloudFront::Distribution"
        }
    }
}
